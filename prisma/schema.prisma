// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique 
  name      String   @unique
  password  String
  visible  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diaries   Diary[]
  comments  Comment[]
  subscriptions Subscription[]
  relationships Relationship[] @relation("relationships")
  isRelated Relationship[] @relation("isRelated")
}

model Diary {
  id        Int      @id @default(autoincrement())
  title     String   
  description String @default("no description")
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  isPrivate Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries   Entry[]
  subscriptions Subscription[]
}

model Entry {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diaryId   Int
  diary     Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  comments  Comment[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entryId   Int
  entry     Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id       Int      @id @default(autoincrement())
  userId  Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  diaryId Int 
  diary Diary @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  NEUTRAL
  SUBSCRIBED
  BLOCKED
}

model Relationship {
  id       Int      @id @default(autoincrement())
  userId  Int
  user User @relation("relationships", fields: [userId], references: [id], onDelete: Cascade)
  status Status @default(NEUTRAL)
  friendId Int
  friend User @relation("isRelated", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}